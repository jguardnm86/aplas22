@article{RefinementTypesForSecureImplementations,
  author    = {Jesper Bengtson and
               Karthikeyan Bhargavan and
               C{\'{e}}dric Fournet and
               Andrew D. Gordon and
               Sergio Maffeis},
  title     = {{Refinement Types for Secure Implementations}},
  journal   = {{ACM} Trans. Program. Lang. Syst.},
  volume    = {33},
  number    = {2},
  pages     = {8:1--8:45},
  year      = {2011},
  url       = {https://doi.org/10.1145/1890028.1890031},
  doi       = {10.1145/1890028.1890031},
  timestamp = {Tue, 06 Nov 2018 12:51:29 +0100},
  biburl    = {https://dblp.org/rec/journals/toplas/BengtsonBFGM11.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@InProceedings{AbstractRefinementTypes,
author="Vazou, Niki
and Rondon, Patrick M.
and Jhala, Ranjit",
editor="Felleisen, Matthias
and Gardner, Philippa",
title={{Abstract Refinement Types}},
booktitle={{Programming Languages and Systems}},
year="2013",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="209--228",
abstract="We present abstract refinement types which enable quantification over the refinements of data- and function-types. Our key insight is that we can avail of quantification while preserving SMT-based decidability, simply by encoding refinement parameters as uninterpreted propositions within the refinement logic. We illustrate how this mechanism yields a variety of sophisticated means for reasoning about programs, including: parametric refinements for reasoning with type classes, index-dependent refinements for reasoning about key-value maps, recursive refinements for reasoning about recursive data types, and inductive refinements for reasoning about higher-order traversal routines. We have implemented our approach in a refinement type checker for Haskell and present experiments using our tool to verify correctness invariants of various programs.",
isbn="978-3-642-37036-6"
}

@InProceedings{implicit_refinement_types,
  author =	{Tondwalkar, Anish and Kolosick, Matthew and Jhala, Ranjit},
  title =	{{Refinements of Futures Past: Higher-Order Specification with Implicit Refinement Types}},
  booktitle =	{35th European Conference on Object-Oriented Programming (ECOOP 2021)},
  pages =	{18:1--18:29},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-190-0},
  ISSN =	{1868-8969},
  year =	{2021},
  volume =	{194},
  editor =	{M{\o}ller, Anders and Sridharan, Manu},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/opus/volltexte/2021/14061},
  URN =		{urn:nbn:de:0030-drops-140615},
  doi =		{10.4230/LIPIcs.ECOOP.2021.18},
  annote =	{Keywords: Refinement Types, Implicit Parameters, Verification, Dependent Pairs}
}

@INPROCEEDINGS{blockhound,  author={Dobslaw, Felix and Vallin, Morgan and Sundström, Robin},  booktitle={2020 IEEE 20th International Working Conference on Source Code Analysis and Manipulation (SCAM)},   title={Free the Bugs: Disclosing Blocking Violations in Reactive Programming},   year={2020},  volume={},  number={},  pages={177-186},  doi={10.1109/SCAM51674.2020.00025}}



@InProceedings{KernelF,
author="Voelter, Markus",
editor="Rensink, Arend
and S{\'a}nchez Cuadrado, Jes{\'u}s",
title={{The Design, Evolution, and Use of KernelF}},
booktitle={{Theory and Practice of Model Transformation}},
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="3--55",
abstract="KernelF is a functional language built on top of MPS. It is designed to be highly extensible and embeddable in order to support its use at the core of domain-specific languages, realising an approach we sometimes call Funclerative Programming. ``Funclerative'' is of course a mash-up of ``functional'' and ``declarative'' and refers to the idea of using functional programming in the small, and declarative language constructs for the larger-scale, often domain-specific, structures in a program. We have used KernelF in a wide range of languages including health and medicine, insurance contract definition, security analysis, salary calculations, smart contracts and language-definition. In this paper, I illustrate the evolution of KernelF over the last two years. I discuss requirements on the language, and how those drove design decisions. I showcase a couple of the DSLs we built on top of KernelF to explain how MPS was used to enable the necessary language modularity. I demonstrate how we have integrated the Z3 solver to verify some aspects of programs. I present the architecture we have used to use KernelF-based DSLs in safety-critical environments. I close the keynote with an outlook on how KernelF might evolve in the future, and point out a few challenges for which we don't yet have good solutions.",
isbn="978-3-319-93317-7"
}

@inproceedings{CogniCrypt,
  author    = {Stefan Kr{\"{u}}ger and
               Sarah Nadi and
               Michael Reif and
               Karim Ali and
               Mira Mezini and
               Eric Bodden and
               Florian G{\"{o}}pfert and
               Felix G{\"{u}}nther and
               Christian Weinert and
               Daniel Demmler and
               Ram Kamath},
  editor    = {Grigore Rosu and
               Massimiliano Di Penta and
               Tien N. Nguyen},
  title     = {{CogniCrypt: supporting developers in using cryptography}},
  booktitle = {Proceedings of the 32nd {IEEE/ACM} International Conference on Automated
               Software Engineering, {ASE} 2017, Urbana, IL, USA, October 30 - November
               03, 2017},
  pages     = {931--936},
  publisher = {{IEEE} Computer Society},
  year      = {2017},
  url       = {https://doi.org/10.1109/ASE.2017.8115707},
  doi       = {10.1109/ASE.2017.8115707},
  timestamp = {Wed, 16 Oct 2019 14:14:55 +0200},
  biburl    = {https://dblp.org/rec/conf/kbse/KrugerNRAMBGGWD17.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@INPROCEEDINGS{ApiConstraintGraph,  author={Ren, Xiaoxue and Ye, Xinyuan and Xing, Zhenchang and Xia, Xin and Xu, Xiwei and Zhu, Liming and Sun, Jianling},  booktitle={2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE)},   title={API-Misuse Detection Driven by Fine-Grained API-Constraint Knowledge Graph},   year={2020},  volume={},  number={},  pages={461-472},  doi={}}

@article{AspectOrientedProgramming,
author = {Elrad, Tzilla and Filman, Robert E. and Bader, Atef},
title = {Aspect-Oriented Programming: Introduction},
year = {2001},
issue_date = {Oct. 2001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {44},
number = {10},
issn = {0001-0782},
url = {https://doi.org/10.1145/383845.383853},
doi = {10.1145/383845.383853},
journal = {Commun. ACM},
month = oct,
pages = {29–32},
numpages = {4}
}

@ARTICLE{MuC,  author={Amann, Sven and Nguyen, Hoan Anh and Nadi, Sarah and Nguyen, Tien N. and Mezini, Mira},  journal={IEEE Transactions on Software Engineering},   title={A Systematic Evaluation of Static API-Misuse Detectors},   year={2019},  volume={45},  number={12},  pages={1170-1188},  doi={10.1109/TSE.2018.2827384}}

@online{java11,
author = {Goslin, James and Joy, Bill and Steele, Guy and Bracha, Gilad and Buckley, Alex and Smith, Daniel},
title = {The Java Language Specification},
date = {2018-08-21},
url = {https://docs.oracle.com/javase/specs/jls/se11/jls11.pdf},
urldate = {2021-05-27},
subtitle = {Java SE 11 Edition}
}

@online{dart,
title = {Dart Programming Language Specification},
subtitle = {Version 2.12},
url = {https://spec.dart.dev/DartLangSpecDraft.pdf},
urldate = {2021-08-09}
}

@article{LiMisuses,
title={An Integrated Approach for Automated Software Debugging via Machine Learning and Big Code Mining},
author = {Li, Xia}
}

@article{automatedPropertyInference,
  title={Automated API property inference techniques},
  author={Robillard, Martin P and Bodden, Eric and Kawrykow, David and Mezini, Mira and Ratchford, Tristan},
  journal={IEEE Transactions on Software Engineering},
  volume={39},
  number={5},
  pages={613--637},
  year={2012},
  publisher={IEEE}
}

@inproceedings{nullable_annotation,
author = {Papi, Matthew M. and Ali, Mahmood and Correa, Telmo Luis and Perkins, Jeff H. and Ernst, Michael D.},
title = {Practical Pluggable Types for Java},
year = {2008},
isbn = {9781605580500},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1390630.1390656},
doi = {10.1145/1390630.1390656},
booktitle = {Proceedings of the 2008 International Symposium on Software Testing and Analysis},
pages = {201–212},
numpages = {12},
keywords = {readonly, nonnull, type qualifier, type system, verification, igj, immutable, intern, pluggable type, java, case study, flow sensitivity, polymorphism, annotation, javac, compiler, bug finding, javari},
location = {Seattle, WA, USA},
series = {ISSTA '08}
}

@INPROCEEDINGS{stackoverflowshit,  author={Zhang, Tianyi and Upadhyaya, Ganesha and Reinhardt, Anastasia and Rajan, Hridesh and Kim, Miryung},  booktitle={2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE)},   title={Are Code Examples on an Online Q\&A Forum Reliable?: A Study of API Misuse on Stack Overflow},   year={2018},  volume={},  number={},  pages={886-896},  doi={10.1145/3180155.3180260}}

@inproceedings{jvm_dynamic_languages,
author = {Sarimbekov, Aibek and Podzimek, Andrej and Bulej, Lubomir and Zheng, Yudi and Ricci, Nathan and Binder, Walter},
title = {Characteristics of Dynamic JVM Languages},
year = {2013},
isbn = {9781450326018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2542142.2542144},
doi = {10.1145/2542142.2542144},
booktitle = {Proceedings of the 7th ACM Workshop on Virtual Machines and Intermediate Languages},
pages = {11–20},
numpages = {10},
keywords = {java, clojure, workload characterization, jython, dynamic metrics, jruby},
location = {Indianapolis, Indiana, USA},
series = {VMIL '13}
}

@InProceedings{languagetoolbench,
author="Erdweg, Sebastian
and van der Storm, Tijs
and V{\"o}lter, Markus
and Boersma, Meinte
and Bosman, Remi
and Cook, William R.
and Gerritsen, Albert
and Hulshout, Angelo
and Kelly, Steven
and Loh, Alex
and Konat, Gabri{\"e}l D. P.
and Molina, Pedro J.
and Palatnik, Martin
and Pohjonen, Risto
and Schindler, Eugen
and Schindler, Klemens
and Solmi, Riccardo
and Vergu, Vlad A.
and Visser, Eelco
and van der Vlist, Kevin
and Wachsmuth, Guido H.
and van der Woning, Jimi",
editor="Erwig, Martin
and Paige, Richard F.
and Van Wyk, Eric",
title="The State of the Art in Language Workbenches",
booktitle="Software Language Engineering",
year="2013",
publisher="Springer International Publishing",
address="Cham",
pages="197--217",
isbn="978-3-319-02654-1"
}

@article{type_systems,
  author    = {Luca Cardelli},
  title     = {Type Systems},
  journal   = {{ACM} Comput. Surv.},
  volume    = {28},
  number    = {1},
  pages     = {263--264},
  year      = {1996},
  url       = {https://doi.org/10.1145/234313.234418},
  doi       = {10.1145/234313.234418},
  timestamp = {Tue, 06 Nov 2018 12:50:49 +0100},
  biburl    = {https://dblp.org/rec/journals/csur/Cardelli96.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{api_docs_bad,
  title={Improving API documentation usability with knowledge pushing},
  author={Dekel, Uri and Herbsleb, James D},
  booktitle={2009 IEEE 31st International Conference on Software Engineering},
  pages={320--330},
  year={2009},
  organization={IEEE}
}

@inproceedings{javadoc,
  title={API documentation from source code comments: a case study of Javadoc},
  author={Kramer, Douglas},
  booktitle={Proceedings of the 17th annual international conference on Computer documentation},
  pages={147--153},
  year={1999}
}

@article{finding_bugs_is_easy,
author = {Hovemeyer, David and Pugh, William},
title = {Finding Bugs is Easy},
year = {2004},
issue_date = {December 2004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {39},
number = {12},
issn = {0362-1340},
url = {https://doi.org/10.1145/1052883.1052895},
doi = {10.1145/1052883.1052895},
journal = {SIGPLAN Not.},
month = dec,
pages = {92–106},
numpages = {15}
}

@article{QIU201681,
title = {Understanding the API usage in Java},
journal = {Information and Software Technology},
volume = {73},
pages = {81-100},
year = {2016},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2016.01.011},
url = {https://www.sciencedirect.com/science/article/pii/S0950584916300027},
author = {Dong Qiu and Bixin Li and Hareton Leung},
keywords = {API usage, Empirical study, Java},
}

@Inbook{DynamicLogicForJava,
author="Beckert, Bernhard
and Klebanov, Vladimir
and Wei{\ss}, Benjamin",
editor="Ahrendt, Wolfgang
and Beckert, Bernhard
and Bubel, Richard
and H{\"a}hnle, Reiner
and Schmitt, Peter H.
and Ulbrich, Mattias",
title="Dynamic Logic for Java",
bookTitle="Deductive Software Verification -- The KeY Book: From Theory to Practice",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="49--106",
abstract="In this chapter, we introduce an instance of dynamic logic, called JavaDL, that allows us to reason about Java programs. Dynamic logic extends first-order logic and makes it possible to consider several program states in a single formula. Its principle is the formulation of assertions about program behavior by integrating programs and formulas within a single language. We present a sequent calculus for JavaDL, which is used in the KeY System for verifying Java programs. Deduction in this calculus is based on symbolic program execution and simple program transformations and is, thus, close to a programmer's understanding of Java. Besides rules for symbolic execution, the calculus contains rules for program abstraction and modularization, including invariant rules for reasoning about loops and rules that replace a method invocation by the method's contract.",
isbn="978-3-319-49812-6",
doi="10.1007/978-3-319-49812-6_3",
url="https://doi.org/10.1007/978-3-319-49812-6_3"
}

@inproceedings{mop,
  title={Monitoring oriented programming-a project overview},
  author={Chen, Feng and Jin, Dongyun and Meredith, Patrick and Rosu, Grigore},
  booktitle={Proceedings of the Fourth International Conference on Intelligent Computing and Information Systems (ICICIS’09)},
  pages={72--77},
  year={2009},
  organization={Citeseer}
}

@InProceedings{mop_java,
author="Chen, Feng
and Ro{\c{s}}u, Grigore",
editor="Halbwachs, Nicolas
and Zuck, Lenore D.",
title="Java-MOP: A Monitoring Oriented Programming Environment for Java",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2005",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="546--550",
abstract="A Java-based tool-supported software development and analysis framework is presented, where monitoring is a foundational principle. Expressive requirements specification formalisms can be included into the framework via logic plug-ins, allowing one to refer not only to the current state, but also to both past and future states.",
isbn="978-3-540-31980-1"
}

@article{eiffel,
title = {Eiffel: A language and environment for software engineering},
journal = {Journal of Systems and Software},
volume = {8},
number = {3},
pages = {199-246},
year = {1988},
issn = {0164-1212},
doi = {https://doi.org/10.1016/0164-1212(88)90022-2},
url = {https://www.sciencedirect.com/science/article/pii/0164121288900222},
author = {Bertrand Meyer},
abstract = {The Eiffel language and environment address the problem of building quality software in practical development environments. Two software quality factors were deemed essential in the design of the language: reusability and reliability. They led to the following choices: language features that support the underlying bottom-up software design methodology; modular structures based on the object-oriented approach, with support for both generic parameters and multiple inheritance (including a new extension, repeated inheritance); automatic storage management; highly dynamic execution model; support for polymorphism and dynamic binding; fully static typing; information hiding facilities; assertions and invariants that may be monitored at run-time. The Eiffel programming environment, using C as an intermediate language, supports separate compilation of classes and achieves a good run-time performance in both space and time. The environment takes care of automatically recompiling classes as needed after a change, ensuring that only up-to-date versions of classes are used, but avoiding unnecessary recompilations. A set of tools is provided to support the development of sizable software systems. An important part of the environment is the library of reusable classes. Significant extracts of this library are given in the appendix to this article, providing a set of model reusable software components, carefully designed for robustness and extendibility.}
}

@book{design_by_contract,
  title={Design by contract},
  author={Meyer, Bertrand},
  year={2002},
  publisher={Prentice Hall Upper Saddle River}
}

@article{jml,
author = {Leavens, Gary T. and Baker, Albert L. and Ruby, Clyde},
title = {Preliminary Design of JML: A Behavioral Interface Specification Language for Java},
year = {2006},
issue_date = {May 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {3},
issn = {0163-5948},
url = {https://doi.org/10.1145/1127878.1127884},
doi = {10.1145/1127878.1127884},
abstract = {JML is a behavioral interface specification language tailored to Java(TM). Besides
pre- and postconditions, it also allows assertions to be intermixed with Java code;
these aid verification and debugging. JML is designed to be used by working software
engineers; to do this it follows Eiffel in using Java expressions in assertions. JML
combines this idea from Eiffel with the model-based approach to specifications, typified
by VDM and Larch, which results in greater expressiveness. Other expressiveness advantages
over Eiffel include quantifiers, specification-only variables, and frame conditions.This
paper discusses the goals of JML, the overall approach, and describes the basic features
of the language through examples. It is intended for readers who have some familiarity
with both Java and behavioral specification using pre- and postconditions.},
journal = {SIGSOFT Softw. Eng. Notes},
month = may,
pages = {1–38},
numpages = {38}
}

@INPROCEEDINGS{why_no_static,  author={Johnson, Brittany and Song, Yoonki and Murphy-Hill, Emerson and Bowdidge, Robert},  booktitle={2013 35th International Conference on Software Engineering (ICSE)},   title={Why don't software developers use static analysis tools to find bugs?},   year={2013},  volume={},  number={},  pages={672-681},  doi={10.1109/ICSE.2013.6606613}}

@INPROCEEDINGS{dynamic_crypto,  author={Piccolboni, Luca and Guglielmo, Giuseppe Di and Carloni, Luca P. and Sethumadhavan, Simha},  booktitle={2021 IEEE Symposium on Security and Privacy (SP)},   title={CRYLOGGER: Detecting Crypto Misuses Dynamically},   year={2021},  volume={},  number={},  pages={1972-1989},  doi={10.1109/SP40001.2021.00010}}

@article{jml_overview,
title = {An overview of JML tools and applications},
journal = {Electronic Notes in Theoretical Computer Science},
volume = {80},
pages = {75-91},
year = {2003},
note = {Eighth International Workshop on Formal Methods for Industrial Critical Systems (FMICS'03)},
issn = {1571-0661},
doi = {https://doi.org/10.1016/S1571-0661(04)80810-7},
url = {https://www.sciencedirect.com/science/article/pii/S1571066104808107},
author = {Lilian Burdy and Yoonsik Cheon and David Cok and Michael D. Ernst and Joe Kiniry and Gary T. Leavens and K. Rustan and M. Leino and Erik Poll},
keywords = {formal methods, formal specification, Java, runtime assertion checking, static checking, program verification},
abstract = {The Java Modeling Language (JML) can be used to specify the detailed design of Java classes and interfaces by adding annotations to Java source files. The aim of JML is to provide a specification language that is easy to use for Java programmers and that is supported by a wide range of tools for specification type-checking, runtime debugging, static analysis, and verification. This paper gives an overview of the main ideas behind JML, the different groups collaborating to provide tools for JML, and the existing applications of JML. Thus far, most applications have focused on code for programming smartcards written in the Java Card dialect of Java.}
}

@inproceedings{cryptolint,
  author    = {Manuel Egele and
               David Brumley and
               Yanick Fratantonio and
               Christopher Kruegel},
  title     = {An empirical study of cryptographic misuse in android applications},
  booktitle = {2013 {ACM} {SIGSAC} Conference on Computer and Communications Security,
               CCS'13, Berlin, Germany, November 4-8, 2013},
  pages     = {73--84},
  publisher = {{ACM}},
  year      = {2013},
  url       = {https://doi.org/10.1145/2508859.2516693},
  doi       = {10.1145/2508859.2516693},
  timestamp = {Tue, 10 Nov 2020 20:00:25 +0100},
  biburl    = {https://dblp.org/rec/conf/ccs/EgeleBFK13.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{learning_apis,
  title={A field study of API learning obstacles},
  author={Robillard, Martin P and DeLine, Robert},
  journal={Empirical Software Engineering},
  volume={16},
  number={6},
  pages={703--732},
  year={2011},
  publisher={Springer}
}

@inproceedings{dynamic_analysis,
  title={The concept of dynamic analysis},
  author={Ball, Thomas},
  booktitle={Software Engineering—ESEC/FSE’99},
  pages={216--234},
  year={1999},
  organization={Springer}
}

@article{residual_investigation,
author = {Li, Kaituo and Reichenbach, Christoph and Csallner, Christoph and Smaragdakis, Yannis},
title = {Residual Investigation: Predictive and Precise Bug Detection},
year = {2014},
issue_date = {December 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {2},
issn = {1049-331X},
url = {https://doi.org/10.1145/2656201},
doi = {10.1145/2656201},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = dec,
articleno = {7},
numpages = {32},
keywords = {False warnings, existing test cases, RFBI}
}

@article{DesInsecure,
  author    = {Scott G. Kelly},
  title     = {Security Implications of Using the Data Encryption Standard {(DES)}},
  journal   = {{RFC}},
  volume    = {4772},
  pages     = {1--28},
  year      = {2006},
  url       = {https://doi.org/10.17487/RFC4772},
  doi       = {10.17487/RFC4772},
  timestamp = {Tue, 14 May 2019 10:02:05 +0200},
  biburl    = {https://dblp.org/rec/journals/rfc/rfc4772.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{rfc2898,
	series =	{Request for Comments},
	number =	2898,
	howpublished =	{RFC 2898},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC2898},
	url =		{https://rfc-editor.org/rfc/rfc2898.txt},
        author =	{Burt Kaliski},
	title =		{{PKCS \#5: Password-Based Cryptography Specification Version 2.0}},
	pagetotal =	34,
	year =		2000,
	month =		sep,
	abstract =	{This document provides recommendations for the implementation of password-based cryptography, covering key derivation functions, encryption schemes, message-authentication schemes, and ASN.1 syntax identifying the techniques. This memo provides information for the Internet community.},
}

@inproceedings{Java_GC,
  author    = {H. Grgic and
               Branko Mihaljevic and
               A. Radovan},
  title     = {Comparison of garbage collectors in Java programming language},
  booktitle = {41st International Convention on Information and Communication Technology,
               Electronics and Microelectronics, {MIPRO} 2018, Opatija, Croatia,
               May 21-25, 2018},
  pages     = {1539--1544},
  publisher = {{IEEE}},
  year      = {2018},
  url       = {https://doi.org/10.23919/MIPRO.2018.8400277},
  doi       = {10.23919/MIPRO.2018.8400277}
}

@inproceedings{javaNotNull,
  title={Nullness Analysis of Java Bytecode via Supercompilation over Abstract Values},
  author={Klyuchnikov, I},
  booktitle={Fourth International Valentin Turchin Workshop on Metacomputation},
  pages={161--176},
  year={2014}
}

@inproceedings{IntelliJ,
  title={Implementing refactorings in IntelliJ IDEA},
  author={Jemerov, Dmitry},
  booktitle={Proceedings of the 2nd Workshop on Refactoring Tools},
  pages={1--2},
  year={2008}
}

@book{applied_crypto,
  title={Handbook of Applied Cryptography},
  author={Menezes, A.J. and van Oorschot, P.C. and Vanstone, S.A.},
  isbn={9780429881329},
  series={Discrete Mathematics and Its Applications},
  url={https://books.google.de/books?id=YyCyDwAAQBAJ},
  year={2018},
  publisher={CRC Press}
}

@online{EBCinsecure,
  author={Mihir Bellare},
  title = {Symmetric Encryption},
  url = {http://cseweb.ucsd.edu/~mihir/cse107/slides/s-se.pdf},
  year = {2018},
  pages = {6--11},
  urldate = {2021-08-06}
}

@online{zoom_bad,
  author={Marczak, Bill and Scott-Railton, John},
  title = {{Move Fast and Roll Your Own Crypto: A Quick Look at the Confidentiality of Zoom Meetings}},
  url = {https://citizenlab.ca/2020/04/move-fast-roll-your-own-crypto-a-quick-look-at-the-confidentiality-of-zoom-meetings/},
  date = {2020-04-03},
  urldate = {2021-08-31}
}

@online{UseRandomIV,
  author={Bodo Möller},
  title = {{Security of CBC Ciphersuites in SSL/TLS: Problems and Countermeasures}},
  url = {https://www.openssl.org/~bodo/tls-cbc.txt},
  date = {2004-05-20},
  urldate = {2021-08-06}
}

@online{kotlin,
title={Kotlin language specification},
author = {Akhin, Marat and Belyaev, Mikhail},
url = {https://kotlinlang.org/spec/pdf/kotlin-spec.pdf},
urldate = {2021-08-21}
}

@article{md5collisions,
  title={Collisions for Hash Functions MD4, MD5, HAVAL-128 and RIPEMD.},
  author={Wang, Xiaoyun and Feng, Dengguo and Lai, Xuejia and Yu, Hongbo},
  journal={IACR Cryptol. ePrint Arch.},
  volume={2004},
  pages={199},
  year={2004}
}

@article{keyexchange,
  title={On formal models for secure key exchange},
  author={Shoup, Victor},
  year={1999},
  publisher={Citeseer}
}

@inproceedings{virtual_dispatch,
  title={Cfixx: Object type integrity for c++ virtual dispatch},
  author={Burow, Nathan and McKee, Derrick and Carr, Scott A and Payer, Mathias},
  booktitle={Symposium on Network and Distributed System Security (NDSS)},
  year={2018}
}

@inproceedings{java_concurrent_misuse_1,
  title={Towards using concurrent java api correctly},
  author={Liu, Shuang and Bai, Guangdong and Sun, Jun and Dong, Jin Song},
  booktitle={2016 21st International Conference on Engineering of Complex Computer Systems (ICECCS)},
  pages={219--222},
  year={2016},
  organization={IEEE}
}

@InProceedings{PBE_Analyzed,
author="Abadi, Mart{\'i}n
and Warinschi, Bogdan",
editor="Caires, Lu{\'i}s
and Italiano, Giuseppe F.
and Monteiro, Lu{\'i}s
and Palamidessi, Catuscia
and Yung, Moti",
title="Password-Based Encryption Analyzed",
booktitle="Automata, Languages and Programming",
year="2005",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="664--676",
abstract="The use of passwords in security protocols is particularly delicate because of the possibility of off-line guessing attacks. We study password-based protocols in the context of a recent line of research that aims to justify symbolic models in terms of more concrete, computational ones. We offer two models for reasoning about the concurrent use of symmetric, asymmetric, and passwordbased encryption in protocol messages. In each of the models we define a notion of equivalence between messages and also characterize when passwords are used securely in a message or in a set of messages. Our new definition for the computational security of password-based encryption may be of independent interest. The main results of this paper are two soundness theorems. We show that under certain (standard) assumptions about the computational implementation of the cryptographic primitives, symbolic equivalence implies computational equivalence. More importantly, we prove that symbolically secure uses of passwords are also computationally secure.",
isbn="978-3-540-31691-6"
}

@article{PBE_Multi,
  author    = {Mihir Bellare and
               Stefano Tessaro and
               Thomas Ristenpart},
  title     = {Multi-Instance Security and its Application to Password-Based Cryptography},
  journal   = {{IACR} Cryptol. ePrint Arch.},
  volume    = {2012},
  pages     = {196},
  year      = {2012},
  url       = {http://eprint.iacr.org/2012/196},
  timestamp = {Mon, 11 May 2020 15:58:24 +0200},
  biburl    = {https://dblp.org/rec/journals/iacr/BellareTR12.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{ExtendingJava,
author = {Pech, Vaclav and Shatalin, Alex and Voelter, Markus},
title = {JetBrains MPS as a Tool for Extending Java},
year = {2013},
isbn = {9781450321112},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2500828.2500846},
doi = {10.1145/2500828.2500846},
abstract = {JetBrains MPS is an integrated environment for language engineering. It allows language
designers to define new programming languages, both general-purpose and domain-specific,
either as standalone entities or as modular extensions of already existing ones. Since
MPS leverages the concept of projectional editing, non-textual and non-parseable syntactic
forms are possible, including tables or mathematical symbols. This tool paper introduces
MPS and shows how its novel approach can be applied to Java development. Special attention
will be paid to the ability to modularize and compose languages.},
booktitle = {Proceedings of the 2013 International Conference on Principles and Practices of Programming on the Java Platform: Virtual Machines, Languages, and Tools},
pages = {165–168},
numpages = {4},
keywords = {development environments, formal methods, DSLs, language extension},
location = {Stuttgart, Germany},
series = {PPPJ '13}
}

@INPROCEEDINGS{MPS_Modular,  author={Voelter, Markus and Pech, Vaclav},  booktitle={2012 34th International Conference on Software Engineering (ICSE)},   title={Language modularity with the MPS language workbench},   year={2012},  volume={},  number={},  pages={1449-1450},  doi={10.1109/ICSE.2012.6227070}}

@Inbook{WhyMPSMatters,
author="Pech, V{\'a}clav",
editor="Bucchiarone, Antonio
and Cicchetti, Antonio
and Ciccozzi, Federico
and Pierantonio, Alfonso",
title="JetBrains MPS: Why Modern Language Workbenches Matter",
bookTitle="Domain-Specific Languages in Practice: with JetBrains MPS",
year="2021",
publisher="Springer International Publishing",
address="Cham",
pages="1--22",
abstract="The goal of this chapter is to give a perspective on language workbenches, as well as to provide an overview of the MPS features. It starts with an introduction to language workbenches and motivations for DSL development. It then continues with an overview of how languages are created in MPS. Projectional editing is explained and its benefits for DSL design discussed. Other essential aspects of language definition, such as language testing and migration, are covered as well. Finally, useful pointers regarding the MPS ecosystem and the user community are provided.",
isbn="978-3-030-73758-0",
doi="10.1007/978-3-030-73758-0_1",
url="https://doi.org/10.1007/978-3-030-73758-0_1"
}

@inproceedings{user_friendly_projectorial,
  title={Towards user-friendly projectional editors},
  author={Voelter, Markus and Siegmund, Janet and Berger, Thorsten and Kolb, Bernd},
  booktitle={International Conference on Software Language Engineering},
  pages={41--61},
  year={2014},
  organization={Springer}
}

@inproceedings{grammar_cells,
  title={Efficient development of consistent projectional editors using grammar cells},
  author={Voelter, Markus and Szab{\'o}, Tam{\'a}s and Lisson, Sascha and Kolb, Bernd and Erdweg, Sebastian and Berger, Thorsten},
  booktitle={Proceedings of the 2016 ACM SIGPLAN International Conference on Software Language Engineering},
  pages={28--40},
  year={2016}
}

@online{mps_typesystem,
  title={{MPS User's Guide - Typesystem}},
  url = {https://www.jetbrains.com/help/mps/typesystem.html},
  urldate = {2021-08-12},
}

@misc{metacrysl,
      title={Dealing with Variability in API Misuse Specification}, 
      author={Rodrigo Bonifacio and Stefan Krüger and Krishna Narasimhan and Eric Bodden and Mira Mezini},
      year={2021},
      eprint={2105.04950},
      archivePrefix={arXiv},
      primaryClass={cs.CR}
}

@inproceedings{PasswordBasedEncryptionAnalyzed,
  author    = {Mart{\'{\i}}n Abadi and
               Bogdan Warinschi},
  editor    = {Lu{\'{\i}}s Caires and
               Giuseppe F. Italiano and
               Lu{\'{\i}}s Monteiro and
               Catuscia Palamidessi and
               Moti Yung},
  title     = {Password-Based Encryption Analyzed},
  booktitle = {Automata, Languages and Programming, 32nd International Colloquium,
               {ICALP} 2005, Lisbon, Portugal, July 11-15, 2005, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {3580},
  pages     = {664--676},
  publisher = {Springer},
  year      = {2005},
  url       = {https://doi.org/10.1007/11523468\_54},
  doi       = {10.1007/11523468\_54},
  timestamp = {Tue, 14 May 2019 10:00:44 +0200},
  biburl    = {https://dblp.org/rec/conf/icalp/AbadiW05.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@INPROCEEDINGS{JCA,  author={Shen, Guicheng and Zheng, Xuefeng},  booktitle={2008 4th International Conference on Wireless Communications, Networking and Mobile Computing},   title={Java Cryptography Architecture and Security of Electronic Commerce},   year={2008},  volume={},  number={},  pages={1-4},  doi={10.1109/WiCom.2008.2125}}

@inproceedings{Bouncycastle,
author = {Wijayarathna, Chamila and Arachchilage, Nalin A. G.},
title = {Why Johnny Can't Store Passwords Securely? A Usability Evaluation of Bouncycastle Password Hashing},
year = {2018},
isbn = {9781450364034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3210459.3210483},
doi = {10.1145/3210459.3210483},
booktitle = {Proceedings of the 22nd International Conference on Evaluation and Assessment in Software Engineering 2018},
pages = {205–210},
numpages = {6},
location = {Christchurch, New Zealand},
series = {EASE'18}
}

@article{yaml,
  title={Yaml ain't markup language (yaml™) version 1.1},
  author={Ben-Kiki, Oren and Evans, Clark and Ingerson, Brian},
  journal={Working Draft 2008-05},
  volume={11},
  year={2009}
}

@article{other_classification,
  author    = {Martin Monperrus and
               Michael Eichberg and
               Elif Tekes and
               Mira Mezini},
  title     = {What should developers be aware of? An empirical study on the directives
               of {API} documentation},
  journal   = {Empir. Softw. Eng.},
  volume    = {17},
  number    = {6},
  pages     = {703--737},
  year      = {2012},
  url       = {https://doi.org/10.1007/s10664-011-9186-4},
  doi       = {10.1007/s10664-011-9186-4},
  timestamp = {Tue, 25 Aug 2020 16:58:52 +0200},
  biburl    = {https://dblp.org/rec/journals/ese/MonperrusETM12.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{bleichenbacher1998chosen,
  title={Chosen ciphertext attacks against protocols based on the RSA encryption standard PKCS\# 1},
  author={Bleichenbacher, Daniel},
  booktitle={Annual International Cryptology Conference},
  pages={1--12},
  year={1998},
  organization={Springer}
}

@inproceedings {MuBench,
  title = {{MUBench: A Benchmark for API-Misuse Detectors}},
  author = {Amann, Sven and Nadi, Sarah and Nguyen, Hoan Anh and Nguyen, Tien N. and Mezini, Mira},
  booktitle = {{Proceedings of the 13th International Conference on Mining Software Repositories}},
  series = {MSR 2016},
  year = {2016},
  doi = {10.1145/2901739.2903506},
  url = {http://dx.doi.org/10.1145/2901739.2903506},
}

@inproceedings{CrySL,
  author    = {Stefan Kr{\"{u}}ger and
               Johannes Sp{\"{a}}th and
               Karim Ali and
               Eric Bodden and
               Mira Mezini},
  editor    = {Todd D. Millstein},
  title     = {CrySL: An Extensible Approach to Validating the Correct Usage of Cryptographic
               APIs},
  booktitle = {32nd European Conference on Object-Oriented Programming, {ECOOP} 2018,
               July 16-21, 2018, Amsterdam, The Netherlands},
  series    = {LIPIcs},
  volume    = {109},
  pages     = {10:1--10:27},
  publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
  year      = {2018},
  url       = {https://doi.org/10.4230/LIPIcs.ECOOP.2018.10},
  doi       = {10.4230/LIPIcs.ECOOP.2018.10},
  timestamp = {Tue, 11 Feb 2020 15:52:14 +0100},
  biburl    = {https://dblp.org/rec/conf/ecoop/KrugerS0BM18.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
